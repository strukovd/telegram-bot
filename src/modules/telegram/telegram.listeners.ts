import { ConfigService } from '@nestjs/config';
import { Command, Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';

@Update()
export class TelegramListeners {

	constructor(
		@InjectBot() private readonly bot: Telegraf<Context>,
		private readonly configService: ConfigService
	) {
		const commands = [
			{ command: 'start', description: '–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫' },
			{ command: 'subscribe', description: '–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É' },
			{ command: 'unsubscribe', description: '–û—Ç–ø–∏—Å–∞—Ç—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏' },
		];
		this.bot.telegram.setMyCommands(commands);
	}


	@Start()
	async startCommand(ctx: Context): Promise<void> {
		await ctx.reply(`–ü—Ä–∏–≤–µ—Ç üëã`);
	}


	@Command(`subscribe`)
	async onSubscribe(@Ctx() ctx: Context) {
		await ctx.reply('–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É —Ñ–æ—Ä–º ü§ù');
	}

	@Command(`unsubscribe`)
	async onUnsubscribe(@Ctx() ctx: Context) {
		await ctx.reply('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ñ–æ—Ä–º');
	}


	// @On('text')
	// async onText(@Ctx() ctx: Context) {
	// 	const userId = ctx.message.from.id;
	// 	const { id: chatId, type: chatType } = ctx.chat;
	// 	console.log('User ID:', userId);
	// 	console.log('Chat ID:', chatId);
	// 	console.log('Chat type:', chatType);
	// 	await ctx.reply('ü§ù');
	// }
}
